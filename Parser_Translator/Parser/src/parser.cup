import java_cup.runtime.*;

//  Usercode Components
parser code {:
    // Connect this parser to a scanner!
    Lexer s;
    Parser(Lexer s){ this.s=s; }
:}

// Define how to connect to the lexer!
scan with {: return s.next_token(); :};


// Symbol Lists
// Terminals (tokens returned by the lexer).
terminal            PLUS, LPAREN, RPAREN, LBRACKET, RBRACKET, COMMA, IF, ELSE, PREFIX, REVERSE;
terminal String     STRING_LITERAL, IDENTIFIER;        

// Non terminals
non terminal        program, definition_list, definition, call_list, parameters_list, parameters, block, expr, if_else, call, condition ;

// Precedence Declarations
// In contrast to JFlex, precedence in CUP works bottom to up.
// That is, the earlier the declaration, the lower the precedence.
precedence left PREFIX;
precedence left PLUS;
precedence left REVERSE;

// // The Grammar Rules
start with program;
// The programms are concluded from function definitions and calls. 
// At the output we see the calls first and then the definitions.
program ::= definition_list:def_ls call_list:cls {: System.out.println("public class Main{\n\tpublic static void main(String[] args){\n" + cls + "\t}\n" + def_ls + "\n}"); :}
;
// definition_list
definition_list ::= definition_list:def_ls definition:def   {: RESULT = def_ls + "\n" + def; :}
                |                                           {: RESULT = ""; :}                                       
;
// definition
definition ::= call:c LBRACKET block:bl RBRACKET  {: RESULT = ("\tpublic static String " + c + "{\n\t\t return " + bl + ";\n\t}"); :}
;

//call_list
call_list ::= call:c call_list:cl   {: RESULT = "\t\tSystem.out.println(" + ((String)c).replaceAll("String ","") + ");\n" + cl; :} 
            |                       {: RESULT = ""; :}  
;

// call is something like => func( ... parameters_list ...)
call ::= IDENTIFIER:id LPAREN parameters_list:p RPAREN  {: RESULT = id + "(" + p + ")"; :}
;
// parameters_list
parameters_list ::= parameters_list:p_list parameters:p {: RESULT = ((String)p_list + (String)p); :}
                |                                       {: RESULT = ""; :}  
;   
// parameters could produce on of below rules
parameters ::= parameters:p1 PLUS parameters:p2             {: RESULT = p1 + "+" + p2; :}
            | IDENTIFIER:id COMMA                           {: RESULT = "String " + id + ", "; :}
            | IDENTIFIER:id                                 {: RESULT = "String " + id; :}
            | STRING_LITERAL:str COMMA                      {: RESULT = "String " + "\"" + str + "\"" + ", "; :}
            | STRING_LITERAL:str                            {: RESULT = "String " + "\"" + str + "\""; :}
            | call:c                                        {: RESULT = c; :}           // a call could take for a parameter another call.Without a comma if it is the last argument.
            | call:c COMMA                                  {: RESULT = c + ", "; :}    // With a comma if it is the first.
;

// Code block could be:
// just a string or identifier (f.e return a value)
// the arguments concatenated with + 
// call of a function
// a series of if statements.
block ::= expr:ex            {: RESULT = ex ; :} // For just an expression
;

expr ::= expr:e1 PLUS expr:e2   {: RESULT = e1 + " + " + e2 ; :}
        | REVERSE expr:e        {: RESULT =  "(new StringBuilder(" + e + ").reverse().toString())"; :} 
        | IDENTIFIER:id         {: RESULT = id ; :}  
        | STRING_LITERAL:str    {: RESULT = "\"" + str + "\""; :}     
        | if_else:ifel          {: RESULT = ifel; :}    
        | call:c                {: RESULT = ((String)c).replaceAll("String ",""); :} 
;

// Represent the if_else statements as a ternaries so we do not have to deal with tabs counting
if_else ::= IF LPAREN condition:cond RPAREN block:bl1 ELSE block:bl2 {:RESULT = "(" + cond +"?" + bl1 +":" + bl2 + ")"; :} 
;

// Perfix and Reverse operator could be only inside the condition of the if statements.
condition ::= expr:e1 PREFIX expr:e2  {: RESULT = "( " + e2 + " )." + "startsWith"  + "( " + e1 + " )"; :}                  
            | expr:ex                 {: RESULT = ex; :}        
;






