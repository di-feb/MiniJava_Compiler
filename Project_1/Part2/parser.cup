import java_cup.runtime.*;
// Parser code to change the way the parser reports errors (include
// line and column number of the error). 
parser code {:
    public boolean syntaxErrors;

    public void syntax_error(Symbol current_token) {
        report_error(
            "Syntax error at line " + (current_token.left+1) + ", column "
            + current_token.right, null
        );
    }
:};

//  Usercode Components
parser code {:
    // Connect this parser to a scanner!
    Lexer s;
    Parser(Lexer s){ this.s=s; }
:}

// Define how to connect to the lexer!
scan with {: return s.next_token(); :};


// Symbol Lists
// Terminals (tokens returned by the scanner).
// Lexical Analysis is the process of converting a stream
// of characters into a sequence of tokens.
// A token represents a string with an assigned meaning
// that describes a series of related lexemes.
// A lexeme is a contiguous sequence of characters
// that form a lexical unit in the grammar of a language.

terminal            PLUS, LPAREN, RPAREN, LBRACKET, RBRACKET, COMMA, IF, ELSE, PREFIX, REVERSE;
terminal String     STRING_LITERAL, IDENTIFIER;        // our scanner provides numbers as strings

// Non terminals
non terminal            program, definition, call;
//non terminal String


//  Precedence Declarations
// In contrast to JFlex, precedence in CUP works bottom to up.
// That is, the earlier the declaration, the lower the precedence.
precedence left PLUS;
precedence left PREFIX;
precedence left REVERSE;


// The Grammar Rules
start with program;
// The programms are concluded from function definitions and calls.
program ::= definition:def call:cl {:System.out.println("public class Main{\n\tpublic static void main(String[] args){\n" + cl + "\t}\n" + def + "\n}"); :};

//definition
definition ::= IDENTIFIER LPAREN 


